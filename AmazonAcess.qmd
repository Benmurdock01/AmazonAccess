---
title: "AmazonAcess"
format: html
editor_options: 
  chunk_output_type: inline
---

```{r}
#libaries
library(tidymodels)
library(embed)
library(vroom)
```

```{r}
#data import
trainData <- vroom::vroom("train.csv") %>% 
  mutate(ACTION = factor(ACTION))
testData <- vroom::vroom("test.csv")
```


```{r}
#recipe
amazon_recipe <- recipe(ACTION ~ ., data = trainData) %>%
  step_mutate_at(all_predictors(), fn = as.factor) %>% 
  step_other(all_nominal_predictors(), threshold = 0.05) %>% 
  step_lencode_mixed(all_nominal_predictors(), outcome = vars(ACTION)) %>% 
  step_zv(all_predictors())

prep <- prep(amazon_recipe)
trainbaked <- bake(prep, new_data = trainData)

ncol(trainbaked)
```


```{r}
#model
amazon_model <- logistic_reg(penalty = tune(), mixture = tune()) %>% 
  set_engine('glmnet')

#workflow
amazon_workflow <- workflow() %>%
  add_recipe(amazon_recipe) %>%
  add_model(amazon_model)

#grid of tuning values
L_levels <- 10

tuning_grid <- grid_regular(penalty(),
                            mixture(),
                            levels = L_levels)

#number of cv splits
folds <- vfold_cv(trainData, v = 10, repeats = 1)

#run cv
cv_results <- amazon_workflow %>% 
  tune_grid(resamples = folds,
            grid = tuning_grid,
            metrics = metric_set(roc_auc))

#find best tuning params
best_tune <- cv_results %>% 
  select_best(metric = 'roc_auc')

#final_wf
final_wf <- amazon_workflow %>% 
  finalize_workflow(best_tune) %>% 
  fit(data = trainData)

final_wf %>% 
  predict(new_data = testData)


#predictions
submission_predictions <- final_wf %>% 
  predict(new_data = testData, type = 'prob') %>% 
  bind_cols(testData) %>%
  rename(ACTION = .pred_1) %>%
  select(id, ACTION)

vroom::vroom_write(submission_predictions, "submission_logReg.csv", delim = ',')
```

